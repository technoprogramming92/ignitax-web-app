---
// src/pages/admin/posts/new.astro
import Layout from "../../../layouts/Layout.astro"; // Adjust path to your main layout

// --- IMPORTANT: Authentication Placeholder ---
// In a real application, you MUST protect this page.
// You would typically use Astro middleware or a page-level check
// to ensure only authenticated users can access '/admin/posts/new'.
// Example (conceptual - requires your auth setup like Lucia):
//
// import { getSession } from '../../../lib/auth'; // Your session function
// const session = await getSession(Astro.request.headers.get('cookie'));
// if (!session?.user) {
//   return Astro.redirect('/login?redirectTo=/admin/posts/new'); // Redirect if not logged in
// }
// ---

const pageTitle = "Create New Blog Post";
---

<Layout title={pageTitle}>
  <div class="container">
    <h1>{pageTitle}</h1>
    <p>Fill out the form below to add a new post to the blog.</p>

    {/* Form for creating a new post */}
    <form id="new-post-form" class="post-form">
      {/* Title Field */}
      <div class="form-group">
        <label for="title">Title</label>
        <input type="text" id="title" name="title" required />
      </div>

      {/* Slug Field */}
      <div class="form-group">
        <label for="slug">Slug</label>
        <input
          type="text"
          id="slug"
          name="slug"
          required
          pattern="[a-z0-9]+(?:-[a-z0-9]+)*"
          title="Use lowercase letters, numbers, and hyphens only (e.g., my-first-post)."
        />
        <small
          >URL-friendly identifier (e.g., my-awesome-post). Use lowercase
          letters, numbers, and hyphens.</small
        >
        {/* Optional: Add JS to auto-generate slug from title */}
      </div>

      {/* Cover Image URL Field */}
      <div class="form-group">
        <label for="coverImageUrl">Cover Image URL</label>
        <input
          type="url"
          id="coverImageUrl"
          name="coverImageUrl"
          placeholder="https://..."
        />
        <small>Provide a direct URL to the main image for this post.</small>
      </div>

      {/* Excerpt Field */}
      <div class="form-group">
        <label for="excerpt">Excerpt (Optional)</label>
        <textarea id="excerpt" name="excerpt" rows="3"></textarea>
        <small>A short summary shown on the blog list page.</small>
      </div>

      {/* Content Field */}
      <div class="form-group">
        <label for="content">Content (Markdown supported)</label>
        <textarea id="content" name="content" rows="15" required></textarea>
        <small
          >The main body of your blog post. Markdown will be rendered.</small
        >
      </div>

      {/* Submit Button */}
      <div class="form-actions">
        <button type="submit" id="submit-button">Create Post</button>
      </div>

      {/* Messages Area */}
      <div id="message-area" aria-live="polite"></div>
    </form>
  </div>

  {/* Client-side script to handle form submission */}
  <script>
    const form = document.getElementById("new-post-form") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submit-button"
    ) as HTMLButtonElement;
    const messageArea = document.getElementById(
      "message-area"
    ) as HTMLDivElement;

    form.addEventListener("submit", async (event) => {
      event.preventDefault(); // Prevent default browser form submission
      messageArea.textContent = ""; // Clear previous messages
      messageArea.className = ""; // Reset message classes
      submitButton.disabled = true; // Disable button during submission
      submitButton.textContent = "Creating...";

      // Create a data object from the form
      const formData = new FormData(form);
      const postData: Record<string, any> = {};
      formData.forEach((value, key) => {
        // Basic handling: Assign directly. Add more complex logic if needed (e.g., checkboxes, selects)
        // Ensure empty optional fields are not sent if your API/model dislikes null/empty strings differently
        if (value || ["title", "slug", "content"].includes(key)) {
          // Ensure required fields are included even if empty initially (validation handles it)
          postData[key] = value;
        }
      });

      // Basic client-side slug formatting reminder (optional)
      if (
        postData.slug &&
        postData.slug !==
          postData.slug
            .toLowerCase()
            .replace(/[^a-z0-9-]/g, "")
            .replace(/-+/g, "-")
      ) {
        console.warn(
          "Slug might contain invalid characters or uppercase letters. Ensure it matches the pattern."
        );
        // You could add more robust client-side slug generation here
      }

      try {
        const response = await fetch("/api/posts", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            // Add Authorization header if your API requires it (e.g., 'Authorization': `Bearer ${yourAuthToken}`)
          },
          body: JSON.stringify(postData),
        });

        const result = await response.json(); // Attempt to parse JSON response

        if (response.ok && result.success) {
          // SUCCESS
          messageArea.textContent = `Post "${result.data.title}" created successfully!`;
          messageArea.className = "message success";
          form.reset(); // Clear the form fields
          // Optional: Redirect after a short delay
          setTimeout(() => {
            window.location.href = `/blog/${result.data.slug}/`; // Redirect to the new post
            // Or redirect to the blog list: window.location.href = '/blog/';
          }, 1500);
        } else {
          // ERROR (API returned an error)
          console.error("API Error:", result);
          let errorMessage = `Error creating post: ${result.message || "Unknown error"}`;
          if (result.errors && Array.isArray(result.errors)) {
            errorMessage += ` Details: ${result.errors.join(", ")}`;
          }
          messageArea.textContent = errorMessage;
          messageArea.className = "message error";
        }
      } catch (error) {
        // NETWORK ERROR or JSON PARSE ERROR
        console.error("Form Submission Error:", error);
        messageArea.textContent =
          "An unexpected error occurred. Please check the console and try again.";
        messageArea.className = "message error";
      } finally {
        // Re-enable the button regardless of success or failure
        submitButton.disabled = false;
        submitButton.textContent = "Create Post";
      }
    });
  </script>

  {/* Basic Styling */}
  <style>
    .container {
      max-width: 800px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
    .post-form .form-group {
      margin-bottom: 1.5rem;
    }
    .post-form label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: bold;
    }
    .post-form input[type="text"],
    .post-form input[type="url"],
    .post-form textarea {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1rem;
      box-sizing: border-box; /* Include padding in width */
    }
    .post-form textarea {
      min-height: 100px;
      resize: vertical;
    }
    .post-form small {
      display: block;
      margin-top: 0.5rem;
      font-size: 0.85rem;
      color: #666;
    }
    .post-form .form-actions {
      margin-top: 2rem;
    }
    .post-form button[type="submit"] {
      background-color: #007bff;
      color: white;
      padding: 0.8rem 1.5rem;
      border: none;
      border-radius: 4px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .post-form button[type="submit"]:hover {
      background-color: #0056b3;
    }
    .post-form button[type="submit"]:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }
    #message-area {
      margin-top: 1.5rem;
      padding: 1rem;
      border-radius: 4px;
      font-weight: bold;
      display: block; /* Use display instead of visibility for layout */
      opacity: 1;
      transition: opacity 0.3s ease;
    }
    #message-area:empty {
      padding: 0;
      opacity: 0;
    }
    .message.success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .message.error {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
  </style>
</Layout>
