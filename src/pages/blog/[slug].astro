---
// src/pages/blog/[slug].astro
import CoreLayoutWhite from "../../components/CoreLayout-white.astro"; // Adjust path if needed
import Layout from "../../layouts/Layout.astro"; // Adjust path if needed

// Imports for Markdown processing (replacing Contentful renderer)
import { marked } from "marked";
import DOMPurify from "isomorphic-dompurify";

// Define the expected structure from our API
interface PostDetail {
  _id: string;
  title: string;
  slug: string;
  content: string; // Expecting Markdown content
  excerpt?: string;
  coverImageUrl?: string;
  createdAt: string;
  updatedAt: string;
  // Add other fields if your API returns them (e.g., author if implemented later)
}

// --- Removed SSG getStaticPaths ---
// export async function getStaticPaths() { ... } // No longer needed for SSR

// --- Fetch data dynamically at request time ---
const { slug } = Astro.params; // Get slug from URL

let post: PostDetail | null = null;
let fetchError: string | null = null;
let sanitizedHtmlContent: string = ""; // For processed and safe HTML content

if (!slug) {
  fetchError = "Blog post slug is missing.";
  // Consider redirecting: return Astro.redirect('/404');
} else {
  try {
    const apiUrl = new URL(`/api/posts/${slug}`, Astro.url.origin); // Fetch from our API
    const response = await fetch(apiUrl);

    if (response.status === 404) {
      return Astro.redirect("/404"); // Redirect if post not found by API
    }

    if (!response.ok) {
      let errorMsg = `API Error (Status: ${response.status})`;
      try {
        const errorResult = await response.json();
        errorMsg = errorResult.message || errorMsg;
      } catch {
        /* Ignore if body isn't JSON */
      }
      throw new Error(errorMsg);
    }

    const result = await response.json();

    if (!result.success || !result.data) {
      throw new Error(result.message || `API fetch failed for slug: ${slug}`);
    }

    post = result.data; // Assign fetched post data

    // Process Markdown content if available
    if (post && post.content) {
      const rawHtml = marked.parse(post.content);
      sanitizedHtmlContent = DOMPurify.sanitize(rawHtml as string);
    }
  } catch (error: any) {
    console.error(`Error fetching post "${slug}" from API:`, error);
    fetchError = error.message || `Could not load post: ${slug}.`;
    post = null; // Ensure post is null on error
  }
}

// Generate description for meta tag (use excerpt or fallback)
const metaDescription = post?.excerpt
  ? post.excerpt.substring(0, 150) + (post.excerpt.length > 150 ? "..." : "")
  : `Read the blog post titled: ${post?.title ?? "Blog Post"}`; // Fallback description
---

{/* Conditional rendering based on fetch result */}
{
  post && !fetchError ? (
    <Layout title={`${post.title} - Ignitax Blog`}>
      {" "}
      {/* Use dynamic title */}
      {/* Inject meta description */}
      <Fragment slot="head">
        <meta name="description" content={metaDescription} />
        {/* Add other meta tags like OpenGraph here if needed */}
        {post.coverImageUrl && (
          <meta property="og:image" content={post.coverImageUrl} />
        )}
      </Fragment>
      <CoreLayoutWhite>
        {/* Breadcrumb (Kept As Is, maybe update text/links) */}
        <section class="breadcrumb-area">
          <div class="container container-semi-large">
            <div class="row">
              <div class="col-lg-12">
                <div
                  class="breadcrumb-info text-center text-lg-start"
                  data-lag="0.2"
                  data-stagger="0.08"
                >
                  <h1>Blog Post</h1> {/* Changed from "Blog Single" */}
                  <p class="d-flex justify-content-center justify-content-lg-start align-items-center mt-2">
                    <a href="/">Homepage</a> {/* Link to root */}
                    <svg
                      width="25"
                      height="2"
                      viewBox="0 0 25 2"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        opacity="0.5"
                        d="M0.15625 1.27637L24.1562 1.27637"
                        stroke="white"
                      />
                    </svg>
                    <a href="/blog">Blog</a> {/* Link to blog list */}
                    <svg
                      width="25"
                      height="2"
                      viewBox="0 0 25 2"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        opacity="0.5"
                        d="M0.15625 1.27637L24.1562 1.27637"
                        stroke="white"
                      />
                    </svg>
                    {post.title} {/* Current post title */}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>
        {/* Breadcrumb End */}

        {/* Blog Detail Section */}
        <section class="blog-area section-margin-top section-margin-bottom">
          <div class="container container-semi-large">
            <div class="row gy-5 gx-lg-5">
              <div class="col-lg-8">
                {/* Blog Post Content Area */}
                <div class="blog-single-wrapper">
                  <div class="blog-single-title-info mb-5">
                    {/* Post Title */}
                    <h2 class="h2">{post.title}</h2>{" "}
                    {/* Removed link around title */}
                    <div class="blog-single-meta section-border-black pb-3 d-flex align-items-center justify-content-between mt-2 gap-2 flex-wrap">
                      {/* Post Metadata */}
                      <p class="text_black d-flex align-items-center gap-2 mt-1 flex-wrap">
                        {/* Use createdAt date */}
                        <time datetime={new Date(post.createdAt).toISOString()}>
                          {new Date(post.createdAt).toLocaleDateString(
                            "en-US",
                            { year: "numeric", month: "long", day: "numeric" }
                          )}
                        </time>
                        {/* Removed Author - Add back if needed */}
                        {/* <svg>...</svg> */}
                        {/* <a href="#">By {post.author}</a> */}
                        {/* Show Updated Date if different */}
                        {post.createdAt !== post.updatedAt && (
                          <>
                            <svg
                              width="18"
                              height="2"
                              viewBox="0 0 18 2"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                opacity="0.14"
                                d="M0 1H18"
                                stroke="#1A1A1A"
                              />
                            </svg>
                            <span>
                              Updated:{" "}
                              <time datetime={post.updatedAt}>
                                {new Date(post.updatedAt).toLocaleDateString(
                                  "en-US",
                                  { month: "long", day: "numeric" }
                                )}
                              </time>
                            </span>
                          </>
                        )}
                      </p>
                      {/* Social Share (Static) */}
                      <div class="blog-single-share d-flex align-items-center gap-2">
                        <span class="fnt-weight-500 text_black">
                          Social Share:
                        </span>
                        <ul class="custom-ul site-social d-flex align-items-center flex-wrap gap-2">
                          <li>
                            <a href="#">
                              <i class="bi bi-facebook" />
                            </a>
                          </li>
                          <li>
                            <a href="#">
                              <i class="bi bi-linkedin" />
                            </a>
                          </li>
                          <li>
                            <a href="#">
                              <i class="bi bi-youtube" />
                            </a>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Cover Image */}
                  {post.coverImageUrl && (
                    <img
                      class="w-100 mb-3"
                      src={post.coverImageUrl}
                      alt={`${post.title} cover image`}
                      loading="lazy"
                      decoding="async"
                      style="max-height: 450px; object-fit: cover; border-radius: 4px; background-color: #f0f0f0;"
                    />
                  )}

                  {/* Main Blog Content (Rendered from Markdown) */}
                  {/* Apply styling via global styles or a container class */}
                  <div
                    class="post-content-area"
                    set:html={sanitizedHtmlContent}
                  />
                </div>
                {/* Details desc End */}
              </div>
            </div>
          </div>
        </section>
        {/* Blog End */}
      </CoreLayoutWhite>
    </Layout>
  ) : (
    // Render error state or redirect (redirect handled above)
    <Layout title="Error loading post">
      <CoreLayoutWhite>
        <div class="container" style="padding: 4rem 1rem; text-align: center;">
          <h2>Oops!</h2>
          <p>
            {fetchError ?? "Could not find or load the requested blog post."}
          </p>
          <a
            href="/blog"
            style="display: inline-block; margin-top: 1rem; text-decoration: underline;"
          >
            Back to Blog List
          </a>
        </div>
      </CoreLayoutWhite>
    </Layout>
  )
}

{
  /* Optional: Add global styles for the rendered content if not already handled */
}
<style is:global>
  .post-content-area h2 {
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.3;
    font-size: 1.8rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 0.3em;
  }
  .post-content-area h3 {
    margin-top: 1.8em;
    margin-bottom: 0.8em;
    line-height: 1.3;
    font-size: 1.5rem;
  }
  .post-content-area p {
    margin-bottom: 1.5em;
    line-height: 1.8;
  }
  .post-content-area ul,
  .post-content-area ol {
    margin-bottom: 1.5em;
    padding-left: 1.8em;
  }
  .post-content-area li {
    margin-bottom: 0.5em;
  }
  .post-content-area blockquote {
    border-left: 5px solid #007bff;
    padding: 1em 1.5em;
    margin: 1.5em 0;
    font-style: italic;
    color: #555;
    background-color: #f8f9fa;
    border-radius: 4px;
  }
  .post-content-area blockquote p {
    margin-bottom: 0.5em;
  }
  .post-content-area img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 1.5em auto;
    display: block;
  }
  .post-content-area pre {
    background-color: #2d2d2d;
    color: #f8f8f2;
    padding: 1.2em;
    border-radius: 4px;
    overflow-x: auto;
    margin: 1.5em 0;
    font-size: 0.95em;
  }
  .post-content-area code {
    font-family: "Courier New", Courier, monospace;
  }
  .post-content-area pre code {
    background-color: transparent;
    padding: 0;
  }
  .post-content-area :not(pre) > code {
    background-color: #e9ecef;
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 0.9em;
  }
  .post-content-area a {
    color: #0056b3;
    text-decoration: underline;
  }
  .post-content-area a:hover {
    color: #003d80;
  }
</style>
